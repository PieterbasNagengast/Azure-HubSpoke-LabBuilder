name: "LabBuilder - Deploy Scenarios"

on:
  workflow_dispatch:
    inputs:
      LabBuilderLocation:
        description: "Location for the LabBuilder deployment"
        type: choice
        options:
          - swedencentral
        required: true
        default: swedencentral
      LabBuilderType:
        description: "LabBuilder type to deploy"
        type: choice
        options:
          - vnet
          - vwan
        required: true
        default: vwan
      LabBuilderAddressSpace:
        description: "Address space for the LabBuilder deployment"
        type: string
        required: true
        default: "172.16.0.0/16"
      LabBuilderCleanup:
        description: "Cleanup the LabBuilder deployment after validation"
        type: boolean
        required: true
        default: true
      OnlyValidate:
        description: "Only validate the LabBuilder deployment without deploying it"
        type: boolean
        required: true
        default: false
  workflow_call:
    inputs:
      LabBuilderType:
        type: string
        required: true
      LabBuilderCleanup:
        type: boolean
        required: true
      LabBuilderLocation:
        type: string
        required: true
      OnlyValidate:
        type: boolean
        required: true
      LabBuilderAddressSpace:
        type: string
        required: true

permissions:
  id-token: write

jobs:
  BicepBuildandLint:
    name: "Bicep Build and Lint"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Bicep Build and Lint
        run: |
          az bicep install
          az bicep version
          az bicep build --file main.bicep

  GenerateListOfParameterFiles:
    name: "Generate list of parameter files"
    runs-on: ubuntu-latest
    needs: BicepBuildandLint
    outputs:
      parameter_files: ${{ steps.generate_list.outputs.parameter_files }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate list of parameter files
        id: generate_list
        run: |
          files=$(ls bicepparams/*.bicepparam)
          filtered_files=$(echo "$files" | grep "${{ inputs.LabBuilderType }}" | sed '/^$/d' | sed 's|bicepparams/||g')
          json_array=$(echo "$filtered_files" | jq -R . | jq -s . | jq -c .)
          echo "$json_array" | jq .
          echo "parameter_files=$json_array" >> $GITHUB_OUTPUT

  DeployScenarios:
    name: "Deploy ${{ inputs.LabBuilderType }} scenario ${{ strategy.job-index }}"
    runs-on: ubuntu-latest
    needs: 
      - BicepBuildandLint
      - GenerateListOfParameterFiles
    strategy:
      max-parallel: 1
      matrix:
        scenarios: ${{ fromJson(needs.GenerateListOfParameterFiles.outputs.parameter_files) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: "Validating ${{ inputs.LabBuilderType }} scenario ${{ strategy.job-index }}"
        uses: azure/bicep-deploy@v2
        with:
          type: "deployment"
          scope: "subscription"
          operation: "validate"
          name: "LabBuilderValidation-${{ inputs.LabBuilderType }}-${{ github.run_id }}"    
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          location: ${{ inputs.LabBuilderLocation}}
          template-file: main.bicep
          parameters-file: bicepparams/${{ matrix.scenarios }}
          parameters: >-
            {
            "adminUsername": "${{ secrets.ADMINUSERNAME }}",
            "adminPassword": "${{ secrets.ADMINPASSWORD }}",
            "sharedKey": "${{ secrets.SHAREDKEY }}",
            "locations": [
                {
                  addressSpace: "${{ inputs.LabBuilderAddressSpace }}",
                  hubSubscriptionID: "${{ secrets.HUB_SUBSCRIPTION_ID }}",
                  onPremSubscriptionID: "${{ secrets.ONPREM_SUBSCRIPTION_ID }}",
                  region: "${{ inputs.LabBuilderLocation}}",
                  spokeSubscriptionID: "${{ secrets.SPOKE_SUBSCRIPTION_ID }}"
                }
            ],
            "spokeRgNamePrefix": "LabBuilderValidation-${{ inputs.LabBuilderType }}-spoke",
            "hubRgName": "LabBuilderValidation-${{ inputs.LabBuilderType }}-hub",
            "onpremRgName": "LabBuilderValidation-${{ inputs.LabBuilderType }}-onprem"
            }
      - name: "Deploy ${{ inputs.LabBuilderType }} scenario ${{ strategy.job-index }}"
        if: inputs.OnlyValidate == 'false'
        uses: azure/bicep-deploy@v2
        with:
          type: "deployment"
          operation: "create"
          scope: "subscription"
          name: "LabBuilderValidation-${{ inputs.LabBuilderType }}-${{ github.run_id }}"
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          location: ${{ inputs.LabBuilderLocation}}
          template-file: main.bicep
          parameters-file: bicepparams/${{ matrix.scenarios }}
          parameters: >-
            {
            "adminUsername": "${{ secrets.ADMINUSERNAME }}",
            "adminPassword": "${{ secrets.ADMINPASSWORD }}",
            "sharedKey": "${{ secrets.SHAREDKEY }}",
            "locations": [
                {
                  addressSpace: "${{ inputs.LabBuilderAddressSpace }}",
                  hubSubscriptionID: "${{ secrets.HUB_SUBSCRIPTION_ID }}",
                  onPremSubscriptionID: "${{ secrets.ONPREM_SUBSCRIPTION_ID }}",
                  region: "${{ inputs.LabBuilderLocation}}",
                  spokeSubscriptionID: "${{ secrets.SPOKE_SUBSCRIPTION_ID }}"
                }
            ],
            "spokeRgNamePrefix": "LabBuilderValidation-${{ inputs.LabBuilderType }}-spoke",
            "hubRgName": "LabBuilderValidation-${{ inputs.LabBuilderType }}-hub",
            "onpremRgName": "LabBuilderValidation-${{ inputs.LabBuilderType }}-onprem"
            }
                
      - name: "Waiting for vWAN routing to finish deploying"
        if: inputs.LabBuilderType == 'vwan' && inputs.OnlyValidate == 'false'
        run: |
          az config set extension.use_dynamic_install=yes_without_prompt
          while true
          do
            sleep 10
            status=$(az network vhub show -g LabBuilderValidation-${{ inputs.LabBuilderType }}-hub -n HUB-${{ inputs.LabBuilderLocation}} --query routingState -o tsv)
            echo "vWAN Hub Routing status: $status"
            if [ "$status" != "Provisioning" ]; then
              echo "vWAN Hub Routing status: $status"
              break
            fi
          done
      - name: "Waiting for vWAN to finish deploying"
        if: inputs.LabBuilderType == 'vwan' && inputs.OnlyValidate == 'false'
        run: |
          while true
          do
            sleep 10
            status=$(az network vhub show -g LabBuilderValidation-${{ inputs.LabBuilderType }}-hub -n HUB-${{ inputs.LabBuilderLocation}} --query provisioningState -o tsv)
            echo "vWAN status: $status"
            if [ "$status" != "Updating" ]; then
              echo "vWAN status: $status"
              break
            fi
          done
          
  Cleanup:
    if: inputs.LabBuilderCleanup
    needs: DeployScenarios
    uses: ./.github/workflows/cleanup.yml
    with:
        LabBuilderType: ${{ inputs.LabBuilderType }}
    secrets:
        inherit



