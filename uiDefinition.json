{
	"$schema": "https://schema.management.azure.com/schemas/2021-09-09/uiFormDefinition.schema.json",
	"view": {
		"kind": "Form",
		"properties": {
			"title": "Hub & Spoke playground - LAB Builder",
			"steps": [
				{
					"name": "basics",
					"label": "Basics",
					"elements": [
						{
							"name": "resourceScope",
							"type": "Microsoft.Common.ResourceScope",
							"location": {
								"resourceTypes": []
							}
						},
						{
							"name": "AddressSpace",
							"type": "Microsoft.Common.TextBox",
							"label": "IP Address Space",
							"defaultValue": "172.16.0.0/16",
							"toolTip": "IP Address space used for VNETs in deployment. Only enter a /16 subnet. Default = 172.16.0.0/16",
							"constraints": {
								"required": true,
								"regex": "^(10(?:\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))\\.0\\.0\\/16)|(172\\.(?:1[6-9]|2\\d|3[0-1])\\.0\\.0\\/16)|(192\\.168\\.0\\.0\\/16)",
								"validationMessage": "The value must match a /16 subnet. 10.[0-255].0.0/16 or 172.[16-31].0.0/16 or 192.168.0.0/16"
							},
							"visible": true
						}
					]
				},
				{
					"name": "HubVNET",
					"label": "Hub VNET",
					"elements": [
						{
							"name": "deployHUB",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Hub",
							"defaultValue": "yes",
							"toolTip": "Deploy Hub VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": true
						},
						{
							"name": "hubSubSection",
							"type": "Microsoft.Common.Section",
							"label": "HUB Deployment settings:",
							"elements": [
								{
									"type": "Microsoft.Common.SubscriptionSelector",
									"name": "hubSubscriptionID",
									"label": "Hub subscription"
								}
							],
							"visible": "[equals(steps('HubVNET').deployHUB,true)]"
						},
						{
							"name": "VNETorVWAN",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Hub as vWAN or VNET",
							"defaultValue": "VNET",
							"toolTip": "Deploy Hub as Virtual or in traditional VNET?",
							"constraints": {
								"allowedValues": [
									{
										"label": "VNET",
										"value": "VNET"
									},
									{
										"label": "VWAN",
										"value": "VWAN"
									}
								],
								"required": true
							},
							"visible": "[equals(steps('HubVNET').deployHUB,true)]"
						},
						{
							"name": "deployVnetPeeringAVNM",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Azure Virtual Network Manager (AVNM)",
							"defaultValue": "no",
							"toolTip": "Let Azure Virtual Network Manager manage VNET Peerings",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').VNETorVWAN,'VNET'))]"
						},
						{
							"name": "hubRgName",
							"type": "Microsoft.Common.TextBox",
							"label": "Hub Resource Group Name",
							"defaultValue": "rg-hub",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": [
									{
										"regex": "^[a-zA-Z0-9_\\-\\.]+$",
										"message": "Only alphanumeric and numeric characters are allowed including symbols like: _ and . and -"
									}
								]
							},
							"visible": "[equals(steps('HubVNET').deployHUB,true)]"
						},
						{
							"name": "deployBastionInHub",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Bastion In Hub",
							"defaultValue": "no",
							"toolTip": "Deploy Bastion Host in Hub VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').VNETorVWAN,'VNET'))]"
						},
						{
							"name": "bastionInHubSKU",
							"type": "Microsoft.Common.DropDown",
							"label": "Azure Bastion SKU",
							"defaultValue": "Basic",
							"toolTip": "Azure Bastion SKU: Basic or Standard",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "Standard",
										"value": "Standard"
									},
									{
										"label": "Basic",
										"value": "Basic"
									}
								]
							},
							"visible": "[equals(steps('HubVNET').deployBastionInHub,true)]"
						},
						{
							"name": "deployGatewayInHub",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Virtual Network Gateway In Hub",
							"defaultValue": "no",
							"toolTip": "Deploy Virtual Network Gateway in Hub VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('HubVNET').deployHUB,true)]"
						},
						{
							"name": "hubBgp",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable BGP",
							"defaultValue": "no",
							"toolTip": "Enable BGP on VPN Gateway",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').deployGatewayInHub,true))]"
						},
						{
							"name": "hubBgpAsn",
							"type": "Microsoft.Common.TextBox",
							"label": "Hub BGP ASN",
							"defaultValue": "65515",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": [
									{
										"regex": "\\b\\d{5}\\b",
										"message": "Only 5 digit mumber"
									},
									{
										"isValid": "[or(and(equals(steps('HubVNET').hubBgpAsn,'65515'),equals(steps('HubVNET').VNETorVWAN,'VWAN')),and(not(equals(steps('HubVNET').hubBgpAsn,'65515')),equals(steps('HubVNET').VNETorVWAN,'VNET')))]",
										"message": "Cannot change BGP ASN. Azure Virtual vWAN requires BGP ASN 65515"
									}
								]
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').deployGatewayInHub,true),equals(steps('HubVNET').hubBgp,true))]"
						},
						{
							"name": "deployFirewallInHub",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Firewall In Hub",
							"defaultValue": "no",
							"toolTip": "Deploy Azure Firewall in Hub VNET. includes deployment of custom route tables in Spokes and Hub VNETs",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('HubVNET').deployHUB,true)]"
						},
						{
							"name": "AzureFirewallTier",
							"type": "Microsoft.Common.DropDown",
							"label": "Azure Firewall Tier",
							"defaultValue": "Standard",
							"toolTip": "Azure Firewall Tier: Standard or Premium",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "Standard",
										"value": "Standard"
									},
									{
										"label": "Premium",
										"value": "Premium"
									}
								]
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').deployFirewallInHub,true))]"
						},
						{
							"name": "AzureFirewallDNSproxy",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable Azure Firewall DNS Proxy",
							"defaultValue": "no",
							"toolTip": "Enable Azure Firewall DNS Proxy",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').deployFirewallInHub,true))]"
						},
						{
							"name": "deployFirewallrules",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Firewall policy rules",
							"defaultValue": "yes",
							"toolTip": "Deploy Firewall policy Rule Collection group which allows spoke-to-spoke and internet traffic",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').deployFirewallInHub,true))]"
						},
						{
							"name": "deployUDRs",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy route tables (UDR's) to VM subnet(s) in Hub and Spokes",
							"defaultValue": "yes",
							"toolTip": "Deploy route tables (UDR's) to VM subnet(s) in Hub and Spokes",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').VNETorVWAN,'VNET'),equals(steps('HubVNET').deployFirewallInHub,true))]"
						},
						{
							"name": "enableRoutingIntent",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable Azure vWAN Routing Intent",
							"defaultValue": "no",
							"toolTip": "Enable Azure vWAN Routing Intent for Internet and/or Public IP traffic to be routed through Azure Firewall in vWAN Hub. Requires Azure Firewall to be deployed in vWAN Hub",
							"constraints": {
								"allowedValues": [
									{
										"label": "no",
										"value": false
									},
									{
										"label": "Private Traffic Only",
										"value": "private"
									},
									{
										"label": "Internet Traffic Only",
										"value": "internet"
									},
									{
										"label": "Internet and Private Traffic",
										"value": "privateAndInternet"
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,true),equals(steps('HubVNET').VNETorVWAN,'VWAN'),equals(steps('HubVNET').deployFirewallInHub,true))]"
						}
					]
				},
				{
					"name": "SpokeVNETs",
					"label": "Spoke VNET's",
					"elements": [
						{
							"name": "deploySpokes",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Spokes",
							"defaultValue": "yes",
							"toolTip": "Deploy Spoke VNETs",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": true
						},
						{
							"name": "spokeSubSection",
							"type": "Microsoft.Common.Section",
							"label": "Spoke Deployment settings:",
							"elements": [
								{
									"type": "Microsoft.Common.SubscriptionSelector",
									"name": "spokeSubscriptionID",
									"label": "Spoke subscription"
								}
							],
							"visible": "[equals(steps('SpokeVNETs').deploySpokes,true)]"
						},
						{
							"name": "spokeRgNamePrefix",
							"type": "Microsoft.Common.TextBox",
							"label": "Spoke Resource Group prefix Name",
							"defaultValue": "rg-spoke",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": [
									{
										"regex": "^[a-zA-Z0-9_\\-\\.]+$",
										"message": "Only alphanumeric and numeric characters are allowed including symbols like: _ and . and -"
									}
								]
							},
							"visible": "[equals(steps('SpokeVNETs').deploySpokes,true)]"
						},
						{
							"name": "amountOfSpokes",
							"type": "Microsoft.Common.Slider",
							"min": 1,
							"max": 25,
							"label": "Amount Of Spokes",
							"sublabel": "# of Spoke",
							"defaultValue": 2,
							"showStepMarkers": false,
							"toolTip": "Amount of Spoke VNETs you want to deploy. Default = 2",
							"constraints": {
								"required": false
							},
							"visible": "[equals(steps('SpokeVNETs').deploySpokes,true)]"
						},
						{
							"name": "deployVnetPeeringMesh",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Directly connect Spoke VNET's in a Fully Meshed topology",
							"defaultValue": "no",
							"toolTip": "directly connect spoke virtual networks to each other in a fully meshed topology using standard VNET peerings.",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('SpokeVNETs').deploySpokes,true)]"
						},
						{
							"name": "PeeringMeshInfoAVNM",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "AVNM will be deployed in Hub. Directly Connected Groups in AVNM will be used.",
								"style": "Info"
							},
							"visible": "[and(equals(steps('SpokeVNETs').deployVnetPeeringMesh,true),equals(steps('HubVNET').deployVnetPeeringAVNM,true))]"
						},
						{
							"name": "PeeringMeshInfo",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "[concat(string(mul(sub(steps('SpokeVNETs').amountOfSpokes,1),steps('SpokeVNETs').amountOfSpokes)), 'x VNET Peerings are created for ', string(steps('SpokeVNETs').amountOfSpokes),'x Spoke VNETs')]",
								"style": "Warning"
							},
							"visible": "[and(equals(steps('SpokeVNETs').deployVnetPeeringMesh,true),equals(steps('HubVNET').deployVnetPeeringAVNM,false))]"
						},
						{
							"name": "deployBastionInSpoke",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Bastion In Spoke",
							"defaultValue": "no",
							"toolTip": "Deploy Bastion Host in every Spoke VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('SpokeVNETs').deploySpokes,true)]"
						},
						{
							"name": "bastionInSpokeSKU",
							"type": "Microsoft.Common.DropDown",
							"label": "Azure Bastion SKU",
							"defaultValue": "Basic",
							"toolTip": "Azure Bastion SKU: Basic or Standard",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "Standard",
										"value": "Standard"
									},
									{
										"label": "Basic",
										"value": "Basic"
									}
								]
							},
							"visible": "[equals(steps('SpokeVNETs').deployBastionInSpoke,true)]"
						}
					]
				},
				{
					"name": "OnPrem",
					"label": "Simulate OnPrem",
					"elements": [
						{
							"name": "deployOnPrem",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy OnPrem",
							"defaultValue": "no",
							"toolTip": "Simulate OnPrem as VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": true
						},
						{
							"name": "onPremSubSection",
							"type": "Microsoft.Common.Section",
							"label": "OnPrem Deployment settings:",
							"elements": [
								{
									"type": "Microsoft.Common.SubscriptionSelector",
									"name": "onPremSubscriptionID",
									"label": "OnPrem subscription"
								}
							],
							"visible": "[equals(steps('OnPrem').deployOnPrem,true)]"
						},
						{
							"name": "OnPremRgName",
							"type": "Microsoft.Common.TextBox",
							"label": "OnPrem Resource Group Name",
							"defaultValue": "rg-onprem",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": [
									{
										"regex": "^[a-zA-Z0-9_\\-\\.]+$",
										"message": "Only alphanumeric and numeric characters are allowed including symbols like: _ and . and -"
									}
								]
							},
							"visible": "[equals(steps('OnPrem').deployOnPrem,true)]"
						},
						{
							"name": "deployBastionInOnPrem",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Bastion In OnPrem",
							"defaultValue": "no",
							"toolTip": "Deploy Bastion Host in OnPrem VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('OnPrem').deployOnPrem,true)]"
						},
						{
							"name": "bastionInOnPremSKU",
							"type": "Microsoft.Common.DropDown",
							"label": "Azure Bastion SKU",
							"defaultValue": "Basic",
							"toolTip": "Azure Bastion SKU: Basic or Standard",
							"constraints": {
								"required": false,
								"allowedValues": [
									{
										"label": "Standard",
										"value": "Standard"
									},
									{
										"label": "Basic",
										"value": "Basic"
									}
								]
							},
							"visible": "[equals(steps('OnPrem').deployBastionInOnPrem,true)]"
						},
						{
							"name": "deployGatewayInOnPrem",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Virtual Network Gateway In OnPrem",
							"defaultValue": "no",
							"toolTip": "Deploy Virtual Network Gateway in OnPrem VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[equals(steps('OnPrem').deployOnPrem,true)]"
						},
						{
							"name": "onpremBgp",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Enable BGP",
							"defaultValue": "no",
							"toolTip": "Enable BGP on VPN Gateway",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('OnPrem').deployOnPrem,true),equals(steps('OnPrem').deployGatewayInOnPrem,true))]"
						},
						{
							"name": "onpremBgpAsn",
							"type": "Microsoft.Common.TextBox",
							"label": "OnPrem BGP ASN",
							"defaultValue": "65010",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": [
									{
										"regex": "\\b\\d{5}\\b",
										"message": "Only 5 digit mumber"
									},
									{
										"isValid": "[not(equals(steps('HubVNET').hubBgpAsn, steps('OnPrem').onpremBgpAsn))]",
										"message": "(vWan) Hub and OnPrem BGP ASN's cannot be the same"
									}
								]
							},
							"visible": "[and(equals(steps('OnPrem').deployOnPrem,true),equals(steps('OnPrem').deployGatewayInOnPrem,true),equals(steps('OnPrem').onpremBgp,true))]"
						},
						{
							"name": "deploySite2Site",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Site-to-Site connection between Hub and OnPrem Gateways",
							"defaultValue": "no",
							"toolTip": "Deploy Site-to-Site connection between Hub and OnPrem Gateways",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(equals(steps('OnPrem').deployGatewayInOnPrem,true),equals(steps('OnPrem').deployOnPrem,true))]"
						},
						{
							"name": "sharedKey",
							"type": "Microsoft.Common.TextBox",
							"label": "Site-to-Site Shared key",
							"defaultValue": "",
							"toolTip": "Use only allowed characters",
							"placeholder": "",
							"multiLine": false,
							"constraints": {
								"required": true,
								"validations": []
							},
							"visible": "[equals(steps('OnPrem').deploySite2Site,true)]"
						},
						{
							"name": "deploySite2SiteInfo",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "This will also enable the deployment of a Virtual Network Gateway in the Hub",
								"style": "Warning"
							},
							"visible": "[equals(steps('OnPrem').deploySite2Site,true)]"
						}
					]
				},
				{
					"name": "VirtualMachines",
					"label": "Virtual Machines",
					"elements": [
						{
							"name": "deployVMinHub",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy VM in Hub",
							"defaultValue": "no",
							"toolTip": "Deploy VM in Hub VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[and(coalesce(steps('HubVNET').deployHUB,false),equals(steps('HubVNET').VNETorVWAN,'VNET'))]"
						},
						{
							"name": "deployVMsInSpokes",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy VM's In Spokes",
							"defaultValue": "no",
							"toolTip": "Deploy VM in every Spoke VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[coalesce(steps('SpokeVNETs').deploySpokes,false)]"
						},
						{
							"name": "deployVMinOnPrem",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy VM In OnPrem",
							"defaultValue": "no",
							"toolTip": "Deploy VM in OnPrem VNET",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[coalesce(steps('OnPrem').deployOnPrem,false)]"
						},
						{
							"name": "noVirtualMachines",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "Virtual machine deployments requires at least that deployment for Hub, Spokes or OnPrem is selected!",
								"style": "Info"
							},
							"visible": "[and(equals(steps('HubVNET').deployHUB,false),equals(steps('SpokeVNETs').deploySpokes,false),equals(steps('OnPrem').deployOnPrem,false))]"
						},
						{
							"name": "VMosTypeInfo",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "OS types: Windows = Windows Server 2022 Datacenter - Gen2, Linux = Ubuntu Server 22.04 LTS Gen2",
								"style": "Info"
							},
							"visible": "[or(equals(steps('VirtualMachines').deployVMsInSpokes,true),equals(steps('VirtualMachines').deployVMinHub,true),equals(steps('VirtualMachines').deployVMinOnPrem,true))]"
						},
						{
							"name": "deployAMA",
							"type": "Microsoft.Common.OptionsGroup",
							"label": "Deploy Azure Monitor Agent (AMA) including Depency Agent (Service Map)",
							"toolTip": "Dependency Agent Only applicable on Windows VM's",
							"defaultValue": "no",
							"constraints": {
								"allowedValues": [
									{
										"label": "yes",
										"value": true
									},
									{
										"label": "no",
										"value": false
									}
								],
								"required": true
							},
							"visible": "[or(equals(steps('VirtualMachines').deployVMsInSpokes,true),equals(steps('VirtualMachines').deployVMinHub,true),equals(steps('VirtualMachines').deployVMinOnPrem,true))]"
						},
						{
							"name": "lawSelectorForAMA",
							"type": "Microsoft.Solutions.ResourceSelector",
							"label": "LogAnalytics Workspace",
							"resourceType": "Microsoft.OperationalInsights/workspaces",
							"visible": "[equals(steps('VirtualMachines').deployAMA,true)]"
						},
						{
							"name": "HubvmSizeSection",
							"type": "Microsoft.Common.Section",
							"label": "Hub Virtual Machines settings:",
							"elements": [
								{
									"name": "osType",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Virtual Machine OS Type (Hub)",
									"defaultValue": "Windows",
									"toolTip": "Virtual Machine OS type. Windows or Linux. Default = Windows",
									"constraints": {
										"allowedValues": [
											{
												"label": "Windows",
												"value": "Windows"
											},
											{
												"label": "Linux",
												"value": "Linux"
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "LinuxDAInfo",
									"type": "Microsoft.Common.InfoBox",
									"options": {
										"text": "VM Dependency Agent won't be installed on Linux.",
										"style": "Warning"
									},
									"visible": "[and(equals(steps('VirtualMachines').HubvmSizeSection.osType,'Linux'),equals(steps('VirtualMachines').deployAMA,true))]"
								},
								{
									"name": "vmSize",
									"type": "Microsoft.Compute.SizeSelector",
									"label": "Virtual Machine SKU Size (Hub)",
									"toolTip": "Virtual Machine SKU Siz. Default = Standard_B2s",
									"recommendedSizes": [
										"Standard_B2s"
									],
									"constraints": {
										"allowedSizes": []
									},
									"options": {
										"hideDiskTypeFilter": false
									},
									"osPlatform": "Windows",
									"count": 1,
									"visible": true
								}
							],
							"visible": "[equals(steps('VirtualMachines').deployVMinHub,true)]"
						},
						{
							"name": "SpokevmSizeSection",
							"type": "Microsoft.Common.Section",
							"label": "Spoke Virtual Machines settings:",
							"elements": [
								{
									"name": "osType",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Virtual Machine OS Type (Spokes)",
									"defaultValue": "Windows",
									"toolTip": "Virtual Machine OS type. Windows or Linux. Default = Windows",
									"constraints": {
										"allowedValues": [
											{
												"label": "Windows",
												"value": "Windows"
											},
											{
												"label": "Linux",
												"value": "Linux"
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "LinuxDAInfo",
									"type": "Microsoft.Common.InfoBox",
									"options": {
										"text": "VM Dependency Agent won't be installed on Linux.",
										"style": "Warning"
									},
									"visible": "[and(equals(steps('VirtualMachines').SpokevmSizeSection.osType,'Linux'),equals(steps('VirtualMachines').deployAMA,true))]"
								},
								{
									"name": "vmSize",
									"type": "Microsoft.Compute.SizeSelector",
									"label": "Virtual Machine SKU Size (Spokes)",
									"toolTip": "Virtual Machine SKU Siz. Default = Standard_B2s",
									"recommendedSizes": [
										"Standard_B2s"
									],
									"constraints": {
										"allowedSizes": []
									},
									"options": {
										"hideDiskTypeFilter": false
									},
									"osPlatform": "Windows",
									"count": "[steps('SpokeVNETs').amountOfSpokes]",
									"visible": true
								}
							],
							"visible": "[equals(steps('VirtualMachines').deployVMsInSpokes,true)]"
						},
						{
							"name": "OnPremvmSizeSection",
							"type": "Microsoft.Common.Section",
							"label": "OnPrem Virtual Machines settings:",
							"elements": [
								{
									"name": "osType",
									"type": "Microsoft.Common.OptionsGroup",
									"label": "Virtual Machine OS Type (OnPrem)",
									"defaultValue": "Windows",
									"toolTip": "Virtual Machine OS type. Windows or Linux. Default = Windows",
									"constraints": {
										"allowedValues": [
											{
												"label": "Windows",
												"value": "Windows"
											},
											{
												"label": "Linux",
												"value": "Linux"
											}
										],
										"required": true
									},
									"visible": true
								},
								{
									"name": "vmSize",
									"type": "Microsoft.Compute.SizeSelector",
									"label": "Virtual Machine SKU Size (OnPrem)",
									"toolTip": "Virtual Machine SKU Siz. Default = Standard_B2s",
									"recommendedSizes": [
										"Standard_B2s"
									],
									"constraints": {
										"allowedSizes": []
									},
									"options": {
										"hideDiskTypeFilter": false
									},
									"osPlatform": "Windows",
									"count": 1,
									"visible": true
								}
							],
							"visible": "[equals(steps('VirtualMachines').deployVMinOnPrem,true)]"
						},
						{
							"name": "VMUserAccountInfo",
							"type": "Microsoft.Common.InfoBox",
							"options": {
								"text": "Enter Local Admin Username and Password for Virtual Machine deployement.",
								"style": "Info"
							},
							"visible": "[or(equals(steps('VirtualMachines').deployVMsInSpokes,true),equals(steps('VirtualMachines').deployVMinHub,true),equals(steps('VirtualMachines').deployVMinOnPrem,true))]"
						},
						{
							"name": "adminUsername",
							"type": "Microsoft.Compute.UserNameTextBox",
							"label": "Admin Username",
							"toolTip": "",
							"osPlatform": "Windows",
							"constraints": {
								"required": true
							},
							"visible": "[or(equals(steps('VirtualMachines').deployVMsInSpokes,true),equals(steps('VirtualMachines').deployVMinHub,true),equals(steps('VirtualMachines').deployVMinOnPrem,true))]"
						},
						{
							"name": "adminPassword",
							"type": "Microsoft.Compute.CredentialsCombo",
							"label": {
								"password": "Admin Password",
								"confirmPassword": "Confirm password"
							},
							"toolTip": {
								"password": ""
							},
							"osPlatform": "Windows",
							"constraints": {
								"required": true
							},
							"options": {
								"hideConfirmation": false
							},
							"visible": "[or(equals(steps('VirtualMachines').deployVMsInSpokes,true),equals(steps('VirtualMachines').deployVMinHub,true),equals(steps('VirtualMachines').deployVMinOnPrem,true))]"
						}
					]
				},
				{
					"name": "tags",
					"label": "Tags",
					"elements": [
						{
							"name": "tagsByResource",
							"type": "Microsoft.Common.TagsByResource",
							"resources": [
								"Microsoft.Compute/virtualMachines",
								"Microsoft.Network/networkSecurityGroups",
								"Microsoft.Network/virtualNetworks",
								"Microsoft.Network/bastionHosts",
								"Microsoft.Network/azureFirewalls",
								"Microsoft.Network/firewallPolicies",
								"Microsoft.Network/routeTables",
								"Microsoft.Network/virtualNetworkGateways",
								"Microsoft.Network/publicIPAddresses",
								"Microsoft.Network/localNetworkGateways",
								"Microsoft.Network/connections",
								"Microsoft.Network/virtualWans",
								"Microsoft.Resources/subscriptions/resourceGroups",
								"Microsoft.Insights/dataCollectionRules",
								"Microsoft.Network/networkManagers",
								"Microsoft.Resources/deploymentScripts",
								"Microsoft.ManagedIdentity/userAssignedIdentities"
							]
						}
					]
				}
			]
		},
		"outputs": {
			"parameters": {
				"AddressSpace": "[steps('basics').AddressSpace]",
				"tagsByResource": "[steps('tags').tagsByResource]",
				"adminUsername": "[coalesce(steps('VirtualMachines').adminUsername,'')]",
				"adminPassword": "[coalesce(steps('VirtualMachines').adminPassword.password,'')]",
				"deployVMsInSpokes": "[coalesce(steps('VirtualMachines').deployVMsInSpokes,false)]",
				"deployVMinHub": "[coalesce(steps('VirtualMachines').deployVMinHub,false)]",
				"deployVMinOnPrem": "[coalesce(steps('VirtualMachines').deployVMinOnPrem,false)]",
				"deploySpokes": "[coalesce(steps('SpokeVNETs').deploySpokes,false)]",
				"amountOfSpokes": "[steps('SpokeVNETs').amountOfSpokes]",
				"deployBastionInSpoke": "[coalesce(steps('SpokeVNETs').deployBastionInSpoke,false)]",
				"deployVnetPeeringMesh": "[coalesce(steps('SpokeVNETs').deployVnetPeeringMesh,false)]",
				"deployHUB": "[coalesce(steps('HubVNET').deployHUB,false)]",
				"hubType": "[steps('HubVNET').VNETorVWAN]",
				"deployVnetPeeringAVNM": "[steps('HubVNET').deployVnetPeeringAVNM]",
				"hubRgName": "[steps('HubVNET').hubRgName]",
				"deployBastionInHub": "[coalesce(steps('HubVNET').deployBastionInHub,false)]",
				"deployGatewayInHub": "[or(steps('HubVNET').deployGatewayInHub,steps('OnPrem').deploySite2Site)]",
				"hubBgp": "[coalesce(steps('HubVNET').hubBgp,false)]",
				"hubBgpAsn": "[steps('HubVNET').hubBgpAsn]",
				"deployFirewallInHub": "[coalesce(steps('HubVNET').deployFirewallInHub,false)]",
				"AzureFirewallTier": "[steps('HubVNET').AzureFirewallTier]",
				"deployUDRs": "[steps('HubVNET').deployUDRs]",
				"spokeRgNamePrefix": "[steps('SpokeVNETs').spokeRgNamePrefix]",
				"deployFirewallrules": "[coalesce(steps('HubVNET').deployFirewallrules,false)]",
				"firewallDNSproxy": "[coalesce(steps('HubVNET').AzureFirewallDNSproxy,false)]",
				"deployOnPrem": "[coalesce(steps('OnPrem').deployOnPrem,false)]",
				"onpremRgName": "[steps('OnPrem').OnPremRgName]",
				"deployBastionInOnPrem": "[coalesce(steps('OnPrem').deployBastionInOnPrem,false)]",
				"deployGatewayinOnPrem": "[coalesce(steps('OnPrem').deployGatewayInOnPrem,false)]",
				"onpremBgp": "[coalesce(steps('OnPrem').onpremBgp,false)]",
				"onpremBgpAsn": "[steps('OnPrem').onpremBgpAsn]",
				"deploySiteToSite": "[coalesce(steps('OnPrem').deploySite2Site,false)]",
				"sharedKey": "[steps('OnPrem').sharedKey]",
				"hubSubscriptionID": "[steps('HubVNET').hubSubSection.hubSubscriptionID.subscriptionId]",
				"spokeSubscriptionID": "[steps('SpokeVNETs').spokeSubSection.spokeSubscriptionID.subscriptionId]",
				"onPremSubscriptionID": "[steps('OnPrem').onPremSubSection.onPremSubscriptionID.subscriptionId]",
				"bastionInHubSKU": "[steps('HubVNET').bastionInHubSKU]",
				"bastionInSpokeSKU": "[steps('SpokeVNETs').bastionInSpokeSKU]",
				"bastionInOnPremSKU": "[steps('OnPrem').bastionInOnPremSKU]",
				"vmSizeHub": "[steps('VirtualMachines').HubvmSizeSection.vmSize]",
				"vmSizeSpoke": "[steps('VirtualMachines').SpokevmSizeSection.vmSize]",
				"vmSizeOnPrem": "[steps('VirtualMachines').OnPremvmSizeSection.vmSize]",
				"osTypeHub": "[steps('VirtualMachines').HubvmSizeSection.osType]",
				"osTypeSpoke": "[steps('VirtualMachines').SpokevmSizeSection.osType]",
				"osTypeOnPrem": "[steps('VirtualMachines').OnPremvmSizeSection.osType]",
				"diagnosticWorkspaceId": "[steps('VirtualMachines').lawSelectorForAMA.id]",
				"internetTrafficRoutingPolicy": "[or(equals(steps('HubVNET').enableRoutingIntent,'internet'),equals(steps('HubVNET').enableRoutingIntent,'privateAndInternet'))]",
				"privateTrafficRoutingPolicy": "[or(equals(steps('HubVNET').enableRoutingIntent,'private'),equals(steps('HubVNET').enableRoutingIntent,'privateAndInternet'))]"
			},
			"kind": "Subscription",
			"subscriptionId": "[steps('basics').resourceScope.subscription.id]",
			"location": "[steps('basics').resourceScope.location.name]"
		}
	}
}